<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
namespace: (selectOne方法)名称空间; (getMapper)指定接口的全类名
id: 唯一标识,,mapper中的方法名
resultType: 返回值类型，可使用<typeAlias>指定别名来简化全类名
databaseId: 指定要使用的数据库厂商，在全局配置文件中需进行配置
#{id }: 从传递出来的参数中返回id值
-->
<mapper namespace="com.mybatis.mapper.EmployeeMapper">
    <!--自定义结果映射集，定义javabean的封装类型
            type：自定义规则的java类型,一般使用全类名，也可以使用别名
            id： 唯一id方便引用
    -->
    <!--Employee类的映射-->
    <!--指定主键列的封装规则
      标签id: 定义的主键会在底层有优化
      标签result： 定义常规列
      标签属性：
        column:  指定数据库的表列名
        property:  指定对应的javabean属性名-->
    <resultMap id="employee" type="com.mybatis.entity.Employee">
        <id column="emp_id" property="id"/>
        <result column="lastName" property="lastName"/>
        <result column="gendor" property="Gendor"/>
        <result column="email" property="email"/>
        <!--联合查询，级联属性封装结果集-->
        <result column="dept_id" property="department.id"/>
        <result column="dept_name" property="department.departmentName"/>
    </resultMap>
    <!--联合对象映射方法2-->
    <resultMap id="myEmployee3" type="com.mybatis.entity.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gendor" property="gendor"/>
        <result column="email" property="email"/>
        <!--association: 可以指定联合的javabean对象,定义单个对象的封装规则
                属性：
                        property: 指定联合对象对应的属性
                        javaType: 指定这个属性对象的类型
        -->
        <!--association 关联单个查询对象
               collection 关联集合结果的查询对象
        -->
        <association property="department" javaType="com.mybatis.entity.Department">
            <id column="dept_id" property="id"/>
            <result column="dept_name" property="departmentName"/>
        </association>
    </resultMap>
    <!--联合对象映射方法3： 分步查5询-->
    <resultMap id="myEmployee4" type="com.mybatis.entity.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gendor" property="gendor"/>
        <result column="email" property="email"/>
        <!--使用association分步查询：
            1. 使用员工id查询员工信息
            2. 根据员工信息中的dept_id查询部门信息
            3. 部门设置到员工中
        -->
        <!--标签属性：
                property： javaBean联合对象的属性
                select: 指定要调用的查询方法
                column: 指定上面的select所需参数对应的数据库表的字段名
                fetchType: 表示延迟加载
                            - lazy: 延迟
                            - eager：立即
        -->
        <association property="department"
                     select="com.mybatis.mapper.DepartmentMapper.getDeptById"
                     column="dept_id" fetchType="lazy">
            <!-- 扩展：多列的值作为参数
                    封装为map传递,格式如下：
                    column={property1=column1,property2=column2}
            column-->
            <!--分步查询可以使用延迟加载(按需加载)
                   不使用延迟加载时，每次查询第一个查询以后的查询的结果也会查询出来，
                   使用延迟加载，部门信息只会在使用时进行查询
            -->
            <!--要使用延迟加载需要在全局配置文件中配置两个条件 -->
        </association>

    </resultMap>
    <resultMap id="emplyeediscriminator" type="employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gendor" property="gendor"/>
        <result column="email" property="email"/>

        <!--鉴别器：根据某列的值改变其封装行为
                column: 指定判定的列名
                 javaType: 列值对应的java类型
        -->
        <discriminator javaType="string" column="gendor">
            <!--resultType指定封装结果集-->
            <case value="0" resultType="employee">
                <association property="department"
                             select="com.mybatis.mapper.DepartmentMapper.getDeptById"
                             column="dept_id" fetchType="lazy"/>
            </case>
            <case value="1" resultType="employee">
                <result column="last_name" property="email"/>
            </case>
        </discriminator>
    </resultMap>

    <!--查询-->
    <select id="getEmployeeByID" resultMap="emplyeediscriminator">
        select * from employee where emp_id = #{id}
    </select>
    <!--<select id="getEmployeeByID" resultMap="myEmployee" databaseId="mysql">-->
        <!--select * from employee where id = #{id}-->
    <!--</select>-->
    <select id="getEmpByIdAndLastName" resultType="employee" databaseId="mysql">
        select * from employee where id=#{id} and last_name=#{lastName}
    </select>
    <select id="getEmpByMap" resultType="employee" databaseId="mysql">
        select * from employee where id=#{id} and last_name=#{lastName}
    </select>
    <!--查询的结果为集合类型是，resultType为集合中元素的类型-->
    <select id="getEmpBylastNameLike" resultType="employee">
        select *
        from employee
        where last_name like #{lastName};
    </select>
    <select id="getEmpByIdReturnMap" resultType="map">
        select * from employee where id=#{id}
    </select>
    <select id="getEmpByLastNameLikeReturnMap" resultType="com.mybatis.entity.Employee">
        select *
        from employee
        where last_name like #{lastName};
    </select>
    <!--联合查询-->
    <!--myEmployee2,myEmployee3均可-->
    <select id="getEmpAndDept" resultMap="myEmployee3">
        select e.*,d.dept_name
        from employee e,department d
        where e.dept_id=d.id and e.id=#{id}
    </select>
    <!--resultMap使用分步查询-->
    <select id="getEmpAndDeptStep" resultMap="myEmployee4">
        select * from employee where id=#{id}
    </select>
    <select id="getEmpsByDeptId" resultMap="myEmployee3">
        select  * from employee where dept_id=#{deptId}
    </select>
    <!--查询部门的时候，将部门所对应的所有员工信息查询出来-->

    
    <!--添加-->
    <!--主键自增：
                mysql
                    支持自增主键，自增主键的获取
                    mybatis也是利用statement.getGenreatedKeys()
                    使用下列属性获取主键：
                    useGeneratedKeys： 使用自增主键获取主键值策略
                    keyProperty：指定对应的主键属性，也就是mybatis要封装给javabean的属性的名字
                Oracle
                    不支持自增，但可以通过模拟序列来实现自增，
                    每次插入数据的主键是从这个序列中获取到的值

     -->

    <!--parameterType可以省略-->
   <insert id="addEmp" parameterType="employee"   databaseId="mysql"
           useGeneratedKeys="true" keyProperty="id">
      insert into employee (last_name,gendor, email)
      values (#{lastName}, #{gendor}, #{email})
   </insert>
    <insert id="addEmp" parameterType="employee"  databaseId="oracle"
            useGeneratedKeys="true" keyProperty="id">
       <!--keyProperty：查出主键值后要封装给javabean的对应的属性
              order="BEFORE" 当前语句在插入之前运行；AFTERA则标识当前语句在插入sql之后运行
               resultType: 要查出的主键值的返回的数据类型
       -->
        <!--BEFORE-->
        <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
            <!--编写查询主键的sql语句-->
            select EMPLOYEES_SEQ.nextval from dual
        </selectKey>
        insert into employee (last_name,gendor, email)
        values (#{id},#{lastName}, #{gendor}, #{email})
        <!--AFTER-->
        <!--<selectKey keyProperty="id" order="AFTER" resultType="Integer">-->
            <!--&lt;!&ndash;编写查询主键的sql语句&ndash;&gt;-->
            <!--select EMPLOYEES_SEQ.currval from dual-->
        <!--</selectKey>-->
        <!--insert into employee (last_name,gendor, email)-->
        <!--values (EMPLOYEES_SEQ.nextval, #{lastName}, #{gendor}, #{email})-->

    </insert>
    
    <!--修改-->
    <update id="updateEmp">
        update employee
        set last_name=#{lastName}, gendor=#{gendor}, email=#{email}
        where id=#{id}
    </update>
    <!--删除-->
    <delete id="deleteEmpById">
        delete from employee
        where id=#{id}
    </delete>
</mapper>